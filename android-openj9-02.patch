diff --git a/jcl/src/java.base/share/classes/openj9/internal/tools/attach/target/AttachHandler.java b/jcl/src/java.base/share/classes/openj9/internal/tools/attach/target/AttachHandler.java
index fd27635736..893db58c98 100644
--- a/jcl/src/java.base/share/classes/openj9/internal/tools/attach/target/AttachHandler.java
+++ b/jcl/src/java.base/share/classes/openj9/internal/tools/attach/target/AttachHandler.java
@@ -153,7 +153,7 @@ public class AttachHandler extends Thread {
 		 *  Java 5: disabled by default on all platforms
 		 */
 		/*[PR Jazz 59196 LIR: Disable attach API by default on z/OS (31972)]*/
-		boolean enableAttach = !IPC.isZOS;
+		boolean enableAttach = false;
 		/* the system property overrides the default */
 		String enableAttachProp = VM.internalGetProperties().getProperty("com.ibm.tools.attach.enable");  //$NON-NLS-1$
 		if (null != enableAttachProp) {
diff --git a/runtime/compiler/CMakeLists.txt b/runtime/compiler/CMakeLists.txt
index b48e48b232..f8db9d74df 100644
--- a/runtime/compiler/CMakeLists.txt
+++ b/runtime/compiler/CMakeLists.txt
@@ -243,6 +243,7 @@ if(OMR_OS_LINUX OR OMR_OS_OSX)
 		-Wno-deprecated
 		-Wno-enum-compare
 		-Wno-write-strings
+		-Wno-stringop-overflow
 		-fasynchronous-unwind-tables
 		-Wreturn-type
 		-pthread
diff --git a/runtime/compiler/aarch64/runtime/PicBuilder.spp b/runtime/compiler/aarch64/runtime/PicBuilder.spp
index eca4d36150..ab172d7687 100644
--- a/runtime/compiler/aarch64/runtime/PicBuilder.spp
+++ b/runtime/compiler/aarch64/runtime/PicBuilder.spp
@@ -234,7 +234,7 @@ L_outOfRange:
 	sub	J9SP, J9SP, #32
 	stp	x0, x30, [J9SP, #16]		// save registers
 	stp	x0, x2, [J9SP]			// push call site addr (x0) and helper index (x2)
-	LOAD_FUNC_PTR(x0, const_mcc_lookupHelperTrampoline_unwrapper)
+	LOAD_FUNC_PTR(x0, mcc_lookupHelperTrampoline_unwrapper)
 	mov	x1, J9SP			// addr of the first arg for mcc_lookupHelperTrampoline_unwrapper
 	mov	x2, J9SP			// addr of the return value from mcc_lookupHelperTrampoline_unwrapper
 	bl	FUNC_LABEL(jitCallCFunction)
@@ -246,9 +246,6 @@ L_outOfRange:
 #if defined(OSX)
 	.data
 #endif
-	.align	3
-const_mcc_lookupHelperTrampoline_unwrapper:
-	.dword	FUNC_LABEL(mcc_lookupHelperTrampoline_unwrapper)
 
 // Static glue target table is laid out as:
 //
@@ -262,16 +259,16 @@ const_mcc_lookupHelperTrampoline_unwrapper:
 #endif
 	.align	3
 __staticGlueTable:
-	.dword	FUNC_LABEL(_interpreterVoidStaticGlue)
-	.dword	FUNC_LABEL(_interpreterIntStaticGlue)
-	.dword	FUNC_LABEL(_interpreterLongStaticGlue)
-	.dword	FUNC_LABEL(_interpreterFloatStaticGlue)
-	.dword	FUNC_LABEL(_interpreterDoubleStaticGlue)
-	.dword	FUNC_LABEL(_interpreterSyncVoidStaticGlue)
-	.dword	FUNC_LABEL(_interpreterSyncIntStaticGlue)
-	.dword	FUNC_LABEL(_interpreterSyncLongStaticGlue)
-	.dword	FUNC_LABEL(_interpreterSyncFloatStaticGlue)
-	.dword	FUNC_LABEL(_interpreterSyncDoubleStaticGlue)
+	.dword	FUNC_LABEL(_interpreterVoidStaticGlue) - .
+	.dword	FUNC_LABEL(_interpreterIntStaticGlue) - .
+	.dword	FUNC_LABEL(_interpreterLongStaticGlue) - .
+	.dword	FUNC_LABEL(_interpreterFloatStaticGlue) - .
+	.dword	FUNC_LABEL(_interpreterDoubleStaticGlue) - .
+	.dword	FUNC_LABEL(_interpreterSyncVoidStaticGlue) - .
+	.dword	FUNC_LABEL(_interpreterSyncIntStaticGlue) - .
+	.dword	FUNC_LABEL(_interpreterSyncLongStaticGlue) - .
+	.dword	FUNC_LABEL(_interpreterSyncFloatStaticGlue) - .
+	.dword	FUNC_LABEL(_interpreterSyncDoubleStaticGlue) - .
 
 	.text
 
@@ -296,11 +293,11 @@ L_mergedUnresolvedSpecialStaticGlue:
 	mov	x2, x0						// save method (x0 trashed by following call)
 	bl	FUNC_LABEL(jitMethodIsNative)			// is the method native?
 	cbz	x0, L_notNative
-	LOAD_FUNC_PTR(x1, const_nativeStaticHelper)		// if so, use nativeStaticHelper
+	LOAD_FUNC_PTR(x1, _nativeStaticHelper)		// if so, use nativeStaticHelper
 	mov	x2, #TR_ARM64nativeStaticHelper
 	b	L_gotHelper					// and skip to writing the address into the instruction
 L_notNative:
-	LOAD_FUNC_PTR(x3, const_staticGlueTable)		// get helper table address
+	LOAD_FUNC_PTR(x3, __staticGlueTable)			// get helper table address
 	lsr	x1, x11, #J9TR_USCSnippet_HelperOffsetShift	// get helper offset
 	mov	x0, x2						// recover method
 	bl	FUNC_LABEL(jitMethodIsSync)			// is method synchronized?
@@ -310,7 +307,10 @@ L_notNative:
 	add	x2, x2, #1
 L_notSync:
 	add	x2, x2, #TR_ARM64interpreterVoidStaticGlue
-	ldr	x1, [x3, x1]					// fetch static glue helper from table
+//	ldr	x1, [x3, x1]					// fetch static glue helper from table
+	add     x3, x3, x1
+	ldr     x1, [x3]
+	add     x1, x1, x3
 L_gotHelper:
 	ldr	x0, [x10, #J9TR_SCSnippet_codeCacheReturnAddress]	// Fetch code cache EIP
 	ldr	x3, [x10, #J9TR_SCSnippet_method]
@@ -324,7 +324,7 @@ L_gotHelper:
 	str	x3, [J9SP, #-8]!				// 		method
 	str	x0, [J9SP, #-8]!				//
 								// prepare args for jitCallCFunction:
-	LOAD_FUNC_PTR(x0, const_mcc_reservationAdjustment_unwrapper)
+	LOAD_FUNC_PTR(x0, mcc_reservationAdjustment_unwrapper)
 	mov	x1, J9SP
 	mov	x2, J9SP
 	bl	FUNC_LABEL(jitCallCFunction)
@@ -338,31 +338,20 @@ L_USSGclinitCase:
 	br	x1						// in <clinit> case, dispatch method directly without patching
 
 FUNC_LABEL(_interpreterUnresolvedStaticGlue):
-	LOAD_FUNC_PTR(x3, const_jitResolveStaticMethod)
+	LOAD_FUNC_PTR(x3, jitResolveStaticMethod)
 	b	L_mergedUnresolvedSpecialStaticGlue
 
 FUNC_LABEL(_interpreterUnresolvedSpecialGlue):
-	LOAD_FUNC_PTR(x3, const_jitResolveSpecialMethod)
+	LOAD_FUNC_PTR(x3, jitResolveSpecialMethod)
 	b	L_mergedUnresolvedSpecialStaticGlue
 
 FUNC_LABEL(_interpreterUnresolvedDirectVirtualGlue):
-	LOAD_FUNC_PTR(x3, const_jitResolveSpecialMethod)
+	LOAD_FUNC_PTR(x3, jitResolveSpecialMethod)
 	b	L_mergedUnresolvedSpecialStaticGlue
 
 #if defined(OSX)
 	.data
 #endif
-	.align	3
-const_mcc_reservationAdjustment_unwrapper:
-	.dword	FUNC_LABEL(mcc_reservationAdjustment_unwrapper)
-const_staticGlueTable:
-	.dword	__staticGlueTable
-const_nativeStaticHelper:
-	.dword	FUNC_LABEL(_nativeStaticHelper)
-const_jitResolveStaticMethod:
-	.dword	FUNC_LABEL(jitResolveStaticMethod)
-const_jitResolveSpecialMethod:
-	.dword	FUNC_LABEL(jitResolveSpecialMethod)
 
 	.text
 
@@ -473,7 +462,7 @@ FUNC_LABEL(_interpreterUnresolvedClassGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveClass)		// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveClass)		// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedClassGlue2):
@@ -492,7 +481,7 @@ FUNC_LABEL(_interpreterUnresolvedClassGlue2):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveClassFromStaticField)	// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveClassFromStaticField)	// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedStringGlue):
@@ -511,7 +500,7 @@ FUNC_LABEL(_interpreterUnresolvedStringGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveString)		// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveString)		// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedMethodTypeGlue):
@@ -530,7 +519,7 @@ FUNC_LABEL(_interpreterUnresolvedMethodTypeGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveMethodType)		// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveMethodType)		// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedMethodHandleGlue):
@@ -549,7 +538,7 @@ FUNC_LABEL(_interpreterUnresolvedMethodHandleGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveMethodHandle)		// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveMethodHandle)		// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedCallSiteTableEntryGlue):
@@ -568,7 +557,7 @@ FUNC_LABEL(_interpreterUnresolvedCallSiteTableEntryGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveInvokeDynamic)	// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveInvokeDynamic)	// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedMethodTypeTableEntryGlue):
@@ -587,7 +576,7 @@ FUNC_LABEL(_interpreterUnresolvedMethodTypeTableEntryGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveHandleMethod)		// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveHandleMethod)		// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedStaticDataGlue):
@@ -606,7 +595,7 @@ FUNC_LABEL(_interpreterUnresolvedStaticDataGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveStaticField)		// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveStaticField)		// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedStaticDataStoreGlue):
@@ -625,7 +614,7 @@ FUNC_LABEL(_interpreterUnresolvedStaticDataStoreGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveStaticFieldSetter)	// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveStaticFieldSetter)	// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedInstanceDataGlue):
@@ -644,7 +633,7 @@ FUNC_LABEL(_interpreterUnresolvedInstanceDataGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveField)		// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveField)		// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedInstanceDataStoreGlue):
@@ -663,7 +652,7 @@ FUNC_LABEL(_interpreterUnresolvedInstanceDataStoreGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveFieldSetter)		// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveFieldSetter)		// load resolve helper address
 	b	L_mergedDataResolve
 
 FUNC_LABEL(_interpreterUnresolvedConstantDynamicGlue):
@@ -682,37 +671,12 @@ FUNC_LABEL(_interpreterUnresolvedConstantDynamicGlue):
 	stp	x24, x25, [J9SP, #192]
 	stp	x26, x27, [J9SP, #208]
 	str	x28, [J9SP, #224]
-	LOAD_FUNC_PTR(x3, const_jitResolveConstantDynamic)	// load resolve helper address
+	LOAD_FUNC_PTR(x3, jitResolveConstantDynamic)	// load resolve helper address
 	b	L_mergedDataResolve
 
 #if defined(OSX)
 	.data
 #endif
-	.align	3
-const_jitResolveClass:
-	.dword	FUNC_LABEL(jitResolveClass)
-const_jitResolveClassFromStaticField:
-	.dword	FUNC_LABEL(jitResolveClassFromStaticField)
-const_jitResolveString:
-	.dword	FUNC_LABEL(jitResolveString)
-const_jitResolveMethodType:
-	.dword	FUNC_LABEL(jitResolveMethodType)
-const_jitResolveMethodHandle:
-	.dword	FUNC_LABEL(jitResolveMethodHandle)
-const_jitResolveInvokeDynamic:
-	.dword	FUNC_LABEL(jitResolveInvokeDynamic)
-const_jitResolveHandleMethod:
-	.dword	FUNC_LABEL(jitResolveHandleMethod)
-const_jitResolveStaticField:
-	.dword	FUNC_LABEL(jitResolveStaticField)
-const_jitResolveStaticFieldSetter:
-	.dword	FUNC_LABEL(jitResolveStaticFieldSetter)
-const_jitResolveField:
-	.dword	FUNC_LABEL(jitResolveField)
-const_jitResolveFieldSetter:
-	.dword	FUNC_LABEL(jitResolveFieldSetter)
-const_jitResolveConstantDynamic:
-	.dword	FUNC_LABEL(jitResolveConstantDynamic)
 
 	.text
 
@@ -965,7 +929,7 @@ L_tryToCompleteSlot1:
 
 	mov	x8, x0						// Preserve x0 in x8
 	add	x0, x7, #J9TR_Snippet_CallInstruction		// addr of BL instruction in snippet
-	LOAD_FUNC_PTR(x1, const_interfaceCompleteSlot2)		// Load the callee address
+	LOAD_FUNC_PTR(x1, _interfaceCompleteSlot2)		// Load the callee address
 	mov	x2, #TR_ARM64interfaceCompleteSlot2
 	bl	L_refreshHelper					// rewrite the BL
 
@@ -1026,7 +990,7 @@ L_tryToCompleteSlot2:
 
 	mov	x8, x0						// Preserve x0 in x8
 	add	x0, x7, #J9TR_Snippet_CallInstruction		// get address of BL instruction in snippet
-	LOAD_FUNC_PTR(x1, const_interfaceSlotsUnavailable)	// address of final helper
+	LOAD_FUNC_PTR(x1, _interfaceSlotsUnavailable)	// address of final helper
 	mov	x2, #TR_ARM64interfaceSlotsUnavailable
 	bl	L_refreshHelper					// rewrite the BL
 
@@ -1120,11 +1084,6 @@ L_commonLookupException:
 #if defined(OSX)
 	.data
 #endif
-	.align	3
-const_interfaceCompleteSlot2:
-	.dword	FUNC_LABEL(_interfaceCompleteSlot2)
-const_interfaceSlotsUnavailable:
-	.dword	FUNC_LABEL(_interfaceSlotsUnavailable)
 
 	.text
 
@@ -1154,7 +1113,7 @@ L_StaticGlueCallFixer1:
 	str	x11, [J9SP, #-8]!				// 		addr of BL instr
 	str	x0, [J9SP, #-8]!				// 		method
 								// prepare args for jitCallCFunction:
-	LOAD_FUNC_PTR(x0, const_mcc_callPointPatching_unwrapper)	// addr of mcc_callPointPatching_unwrapper
+	LOAD_FUNC_PTR(x0, mcc_callPointPatching_unwrapper)	// addr of mcc_callPointPatching_unwrapper
 	mov	x1, J9SP					// addr of the first arg for patchCallPoint
 	mov	x2, J9SP					// where to put the return value
 	bl	FUNC_LABEL(jitCallCFunction)
@@ -1173,9 +1132,6 @@ L_SGCclinitCase1:
 #if defined(OSX)
 	.data
 #endif
-	.align	3
-const_mcc_callPointPatching_unwrapper:
-	.dword	FUNC_LABEL(mcc_callPointPatching_unwrapper)
 
 	.text
 
diff --git a/runtime/compiler/aarch64/runtime/Recompilation.spp b/runtime/compiler/aarch64/runtime/Recompilation.spp
index fd337d9103..08eface35f 100644
--- a/runtime/compiler/aarch64/runtime/Recompilation.spp
+++ b/runtime/compiler/aarch64/runtime/Recompilation.spp
@@ -84,7 +84,7 @@ FUNC_LABEL(_samplingRecompileMethod):
 	ldr	x7, [x30, #J9TR_SamplingLR_BodyInfo]	// J9TR_SamplingLR_BodyInfo = 0
 	ldr	x7, [x7, #J9TR_BodyInfo_MethodInfo]	// fetch method info
 	ldr	x0, [x7, #J9TR_MethodInfo_J9Method]	// x0 is the rammethod (first arg to jitRetranslateMethod)
-	LOAD_FUNC_PTR(x7, const_jitRetranslateMethod)	// load helper address
+	LOAD_FUNC_PTR(x7, jitRetranslateMethod)	// load helper address
 	mov	x1, x10					// old startPC is the second arg to jitRetranslateMethod
 	mov	x2, x8					// saved LR is the third arg to jitRetranslateMethod
 	blr	x7					// call jitRetranslateMethod
@@ -107,9 +107,6 @@ L_samplingRestoreAndDispatch:
 #if defined(OSX)
 	.data
 #endif
-	.align	3
-const_jitRetranslateMethod:
-	.dword	FUNC_LABEL(jitRetranslateMethod)
 
 	.text
 
@@ -160,9 +157,9 @@ L_commonPatchPoint:
 	asr	w1, w1, #24
 	and	w1, w1, #0xFC
 	cmp	w1, #0x94				// check BL instruction (0x94000000 with imm26)
-	LOAD_FUNC_PTR(x0, const_mcc_callPointPatching_unwrapper)
+	LOAD_FUNC_PTR(x0, mcc_callPointPatching_unwrapper)
 	beq	L_directCallPatching
-	LOAD_FUNC_PTR(x0, const_arm64IndirectCallPatching_unwrapper)
+	LOAD_FUNC_PTR(x0, arm64IndirectCallPatching_unwrapper)
 L_directCallPatching:
 	mov	x2, J9SP
 	str	x2, [J9SP, #-8]!			// push: 	location of saved registers
@@ -186,11 +183,6 @@ L_directCallPatching:
 #if defined(OSX)
 	.data
 #endif
-	.align	3
-const_mcc_callPointPatching_unwrapper:
-	.dword	FUNC_LABEL(mcc_callPointPatching_unwrapper)
-const_arm64IndirectCallPatching_unwrapper:
-	.dword	FUNC_LABEL(arm64IndirectCallPatching_unwrapper)
 
 	.text
 
@@ -201,7 +193,7 @@ FUNC_LABEL(_induceRecompilation):
 	str	x0, [J9SP, #-24]!			// first argument is startPC in x0
 	str	J9VMTHREAD, [J9SP, #8]			// second argument is VMThread
 	str	x30, [J9SP, #16]			// save LR
-	LOAD_FUNC_PTR(x0, const_induceRecompilation_unwrapper)
+	LOAD_FUNC_PTR(x0, induceRecompilation_unwrapper)
 	mov	x1, J9SP
 	movz	x2, #0					// result pointer (not used)
 	bl	FUNC_LABEL(jitCallCFunction)
@@ -212,9 +204,6 @@ FUNC_LABEL(_induceRecompilation):
 #if defined(OSX)
 	.data
 #endif
-	.align	3
-const_induceRecompilation_unwrapper:
-	.dword	FUNC_LABEL(induceRecompilation_unwrapper)
 
 	.text
 
@@ -237,7 +226,7 @@ FUNC_LABEL(_initialInvokeExactThunkGlue):
 	stp	x0, x1, [J9SP, #-32]!	// save regs
 	stp	x2, x30, [J9SP, #16]	// jitCallCFunction preserves x3-x7
 	stp	x0, J9VMTHREAD, [J9SP, #-16]! // MethodHandle, VMThread
-	LOAD_FUNC_PTR(x0, const_initialInvokeExactThunk_unwrapper)
+	LOAD_FUNC_PTR(x0, initialInvokeExactThunk_unwrapper)
 	mov	x1, J9SP		// argument array
 	mov	x2, J9SP		// result pointer
 	bl	FUNC_LABEL(jitCallCFunction)
@@ -249,6 +238,3 @@ FUNC_LABEL(_initialInvokeExactThunkGlue):
 #if defined(OSX)
 	.data
 #endif
-	.align	3
-const_initialInvokeExactThunk_unwrapper:
-	.dword	FUNC_LABEL(initialInvokeExactThunk_unwrapper)
diff --git a/runtime/compiler/control/HookedByTheJit.cpp b/runtime/compiler/control/HookedByTheJit.cpp
index 61bf63080f..8aa431e397 100644
--- a/runtime/compiler/control/HookedByTheJit.cpp
+++ b/runtime/compiler/control/HookedByTheJit.cpp
@@ -6728,7 +6728,7 @@ static int32_t J9THREAD_PROC samplerThreadProc(void * entryarg)
             if (crtTime - lastSecondCheck >= 1000)
                {
                lastSecondCheck = crtTime;
-#ifdef LINUX
+#ifndef LINUX
                if (TR::Options::_mallocTrimPeriod > 0) // if enabled
                   {
                   if (crtTime - lastMallocTrimIssueTime >= TR::Options::_mallocTrimPeriod * 1000)
@@ -6935,7 +6935,7 @@ static int32_t J9THREAD_PROC samplerThreadProc(void * entryarg)
                }
 
 #if defined(J9VM_OPT_JITSERVER)
-#if defined(LINUX)
+#if !defined(LINUX)
             static uint64_t lastMallocTrimTime = 0;
             if ((TR::Options::_jitserverMallocTrimInterval > 0) &&
                (persistentInfo->getRemoteCompilationMode() == JITServer::CLIENT) &&
diff --git a/runtime/compiler/control/JitDump.cpp b/runtime/compiler/control/JitDump.cpp
index 49d60d1bef..72ff9ae388 100644
--- a/runtime/compiler/control/JitDump.cpp
+++ b/runtime/compiler/control/JitDump.cpp
@@ -329,7 +329,7 @@ runJitdump(char *label, J9RASdumpContext *context, J9RASdumpAgent *agent)
                deserializer->printStats(stderr);
             }
 
-#if defined(LINUX)
+#if !defined(LINUX)
          static char *isPrintJITServerMallocStats = feGetEnv("TR_PrintJITServerMallocStats");
          if (isPrintJITServerMallocStats)
             malloc_stats();
diff --git a/runtime/gc_structs/ConstantDynamicSlotIterator.cpp b/runtime/gc_structs/ConstantDynamicSlotIterator.cpp
index 8a4491db72..e2223b004a 100644
--- a/runtime/gc_structs/ConstantDynamicSlotIterator.cpp
+++ b/runtime/gc_structs/ConstantDynamicSlotIterator.cpp
@@ -54,6 +54,7 @@ GC_ConstantDynamicSlotIterator::nextSlot(j9object_t *slotPtr) {
 		_condySlotState = condy_slot_value;
 		break;
 	default:
+		result = NULL;
 		Assert_MM_unreachable();
 		break;
 	}
diff --git a/runtime/jcl/unix/syshelp.c b/runtime/jcl/unix/syshelp.c
index a1bae22f74..3bcba2ba70 100644
--- a/runtime/jcl/unix/syshelp.c
+++ b/runtime/jcl/unix/syshelp.c
@@ -108,7 +108,7 @@ char *getPlatformFileEncoding(JNIEnv * env, char *codepageProp, int propSize, in
 			return "EUC-JP-LINUX";
 		}
 	}
-	codepage = nl_langinfo(_NL_CTYPE_CODESET_NAME);
+	codepage = nl_langinfo(CODESET);
 #elif defined(OSX)
 	/* LC_ALL overwrites LC_CTYPE or LANG;
 	 * LC_CTYPE applies to classification and conversion of characters, and to multibyte and wide characters;
diff --git a/runtime/jilgen/CMakeLists.txt b/runtime/jilgen/CMakeLists.txt
index 2d06312b2f..deda9beaf8 100644
--- a/runtime/jilgen/CMakeLists.txt
+++ b/runtime/jilgen/CMakeLists.txt
@@ -53,3 +53,7 @@ add_custom_target(run_constgen
 		${j9vm_BINARY_DIR}/oti/jilconsts.inc
 		${j9vm_BINARY_DIR}/oti/jilvalues.m4
 )
+
+if(CMAKE_SYSTEM_NAME MATCHES "Android")
+    target_link_libraries(constgen PUBLIC android-shmem android-sysv-semaphore iconv)
+endif()
diff --git a/runtime/port/CMakeLists.txt b/runtime/port/CMakeLists.txt
index 89a61c8b9b..65510bc311 100644
--- a/runtime/port/CMakeLists.txt
+++ b/runtime/port/CMakeLists.txt
@@ -237,3 +237,7 @@ install(
 	LIBRARY DESTINATION ${j9vm_SOURCE_DIR}
 	RUNTIME DESTINATION ${j9vm_SOURCE_DIR}
 )
+
+if(CMAKE_SYSTEM_NAME MATCHES "Android")
+    target_link_libraries(j9prt PUBLIC android-shmem android-sysv-semaphore iconv)
+endif()
diff --git a/runtime/port/sysvipc/j9shmem.c b/runtime/port/sysvipc/j9shmem.c
index d214daa834..6ba1ddf724 100644
--- a/runtime/port/sysvipc/j9shmem.c
+++ b/runtime/port/sysvipc/j9shmem.c
@@ -1736,7 +1736,7 @@ openSharedMemory (J9PortLibrary *portLibrary, intptr_t fd, const char *baseFile,
 			if (buf.shm_perm.key != controlinfo->common.ftok_key)
 #elif defined(__GNUC__)
 			/*Use .__key for __GNUC__*/
-			if (buf.shm_perm.__key != controlinfo->common.ftok_key)
+			if (buf.shm_perm.key != controlinfo->common.ftok_key)
 #endif
 			{
 #if defined (J9OS_I5)
diff --git a/runtime/port/sysvipc/j9shsem_deprecated.c b/runtime/port/sysvipc/j9shsem_deprecated.c
index 421a70169d..737053b5f7 100644
--- a/runtime/port/sysvipc/j9shsem_deprecated.c
+++ b/runtime/port/sysvipc/j9shsem_deprecated.c
@@ -1089,7 +1089,7 @@ openSemaphore(struct J9PortLibrary *portLibrary, intptr_t fd, char *baseFile, j9
 			if (buf.key != controlinfo->ftok_key)
 #elif defined(__GNUC__)
 			/*Use .__key for __GNUC__*/
-			if (buf.sem_perm.__key != controlinfo->ftok_key)
+			if (buf.sem_perm.key != controlinfo->ftok_key)
 #endif
 			{
 #if defined (J9OS_I5)
diff --git a/runtime/port/sysvipc/j9shsemun.h b/runtime/port/sysvipc/j9shsemun.h
index f274e45f62..ba23f27ee9 100644
--- a/runtime/port/sysvipc/j9shsemun.h
+++ b/runtime/port/sysvipc/j9shsemun.h
@@ -24,20 +24,6 @@
 
 #include <sys/types.h>
 
-#if defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)
-/* union semun is defined by including <sys/sem.h> */
-#else
-#if !defined(OSX)
-/* according to X/OPEN we have to define it ourselves */
-union semun {
-	int val;                    /* value for SETVAL */
-	struct semid_ds* buf;       /* buffer for IPC_STAT, IPC_SET */
-	unsigned short int* array;  /* array for GETALL, SETALL */
-	struct seminfo* __buf;      /* buffer for IPC_INFO */
-};
-#endif /* OSX */
-#endif
-
 #endif     /* j9shsemun_h */
 
 
diff --git a/runtime/port/unix/j9ipcmutex.c b/runtime/port/unix/j9ipcmutex.c
index b0a2c972c2..21370abe0c 100644
--- a/runtime/port/unix/j9ipcmutex.c
+++ b/runtime/port/unix/j9ipcmutex.c
@@ -38,17 +38,6 @@
 #include <errno.h>
 #include "j9port.h"
 
-#if !defined(OSX) /* OSX provides this union in it's sys/sem.h */
-/* arg for semctl semaphore system calls. */
-union semun {
-	int val;
-    struct semid_ds *buf;
-    uint16_t *array;
-};
-#endif /* OSX */
-
-
-
 /**
  * Acquires a named mutex for the calling process.
  *
diff --git a/runtime/tests/jsig/main.c b/runtime/tests/jsig/main.c
index 8689101f8b..9eefc0ecc0 100644
--- a/runtime/tests/jsig/main.c
+++ b/runtime/tests/jsig/main.c
@@ -70,7 +70,7 @@ static sig_atomic_t handlerCalled = 0;
 
 typedef jint (JNICALL *CreateVM)(JavaVM**, JNIEnv**, void*);
 
-static jmp_buf jmpenv;
+static sigjmp_buf jmpenv;
 void sighandlerPrimary(int);
 void sighandlerSecondary(int);
 static void runTest(JNIEnv *env);
diff --git a/runtime/tests/port/testProcessHelpers.c b/runtime/tests/port/testProcessHelpers.c
index 5f44aac4b2..e12982eb54 100644
--- a/runtime/tests/port/testProcessHelpers.c
+++ b/runtime/tests/port/testProcessHelpers.c
@@ -53,18 +53,6 @@
 
 #if defined(LINUX) || defined(J9ZOS390) || defined(AIXPPC) || defined(OSX)
 
-#if (defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)) || defined(OSX)
-/* union semun is defined by including <sys/sem.h> */
-#else
-/* according to X/OPEN we have to define it ourselves */
-union semun {
-	int val;                    /* value for SETVAL */
-	struct semid_ds* buf;       /* buffer for IPC_STAT, IPC_SET */
-	unsigned short int* array;  /* array for GETALL, SETALL */
-	struct seminfo* __buf;      /* buffer for IPC_INFO */
-};
-#endif
-
 IDATA 
 openLaunchSemaphore (J9PortLibrary* portLibrary, const char* name, UDATA nProcess) 
 {
diff --git a/runtime/tests/shared/ProcessHelper.cpp b/runtime/tests/shared/ProcessHelper.cpp
index 78432ed22a..196d3e7e48 100644
--- a/runtime/tests/shared/ProcessHelper.cpp
+++ b/runtime/tests/shared/ProcessHelper.cpp
@@ -51,18 +51,6 @@ extern "C" {
 
 #if defined(LINUX) || defined(J9ZOS390) || defined(AIXPPC) || defined(OSX)
 
-#if (defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)) || defined(OSX)
-/* union semun is defined by including <sys/sem.h> */
-#else
-/* according to X/OPEN we have to define it ourselves */
-union semun {
-	int val;                    /* value for SETVAL */
-	struct semid_ds* buf;       /* buffer for IPC_STAT, IPC_SET */
-	unsigned short int* array;  /* array for GETALL, SETALL */
-	struct seminfo* __buf;      /* buffer for IPC_INFO */
-};
-#endif
-
 typedef struct ProcessHelperSemaphoreHandle {
 	int semid;
 	U_8 creator;
diff --git a/runtime/vm/CRIUHelpers.cpp b/runtime/vm/CRIUHelpers.cpp
index 27a2ae39f3..dffaff5a85 100644
--- a/runtime/vm/CRIUHelpers.cpp
+++ b/runtime/vm/CRIUHelpers.cpp
@@ -1850,7 +1850,7 @@ criuCheckpointJVMImpl(JNIEnv *env,
 
 		TRIGGER_J9HOOK_VM_CRIU_CHECKPOINT(vm->hookInterface, currentThread);
 
-		malloc_trim(0);
+		// malloc_trim(0);
 		Trc_VM_criu_before_checkpoint(currentThread, j9time_nano_time(), j9time_current_time_nanos(&success));
 
 		VM_VMHelpers::setVMState(currentThread, J9VMSTATE_CRIU_SUPPORT_CHECKPOINT_PHASE_END);
